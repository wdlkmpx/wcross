#!/bin/bash
#
# toolchain-builder config, no need to specify a target here
#   use ./build.sh <target>
#
# (this is sourced after targets/xxx)
#

if [ -f /etc/os-release ] ; then
    . /etc/os-release
fi

## By default, cross compilers are installed to ./0output under the top-level
## musl-cross-make directory and can later be moved wherever you want them.
## To install directly to a specific location, set it here.
## Multiple targets can safely be installed in the same location
#if [ $(id -u) -eq 0 ] ; then
#    INSTALL_ROOTDIR=/opt/wcross
#else
#    INSTALL_ROOTDIR=${HOME}/wcross
#fi

## By default C and C++ are the only languages enabled, and these are
## the only ones tested and known to be supported. You can uncomment the
## following and add other languages if you want to try getting them to
## work too.
if [ -z "$GCC_LANGUAGES" ] ; then
    GCC_LANGUAGES='--enable-languages=c,c++,'
    #GCC_LANGUAGES='--enable-languages=c,c++,ada,fortran,go,d,objc,obj-c++'
fi

## Something like the following can be used to produce a static-linked
## toolchain that's deployable to any system with matching arch, using
## an existing musl-targeted cross compiler
HOST=''
if [ "$ID" != "alpine" ] && [ -f ../build.sh ] ; then
  case ${TARGET} in *musl*)
    case $(uname -m) in i?86|x86_64)
        if [ ! -d ../cross-compiler/i686-linux-musl-cross ] ; then
            (cd .. ; ./build.sh -pkg none -arch i686 )
        fi
        if [ -d ../cross-compiler/i686-linux-musl-cross ] ; then
            XCCDIR=`realpath ../cross-compiler/i686-linux-musl-cross/bin`
            export PATH=${XCCDIR}:${PATH}
            HOST="i686-linux-musl"
        fi
        ;;
    esac 
    ;;
  esac
fi

## Recommended options for smaller build for deploying binaries:
export CFLAGS="-static --static -g0 -Os"
export CXXFLAGS="-static --static -g0 -Os"
export LDFLAGS="-s"
echo "CFLAGS   = ${CFLAGS}"
echo "CXXFLAGS = ${CXXFLAGS}"
echo "LDFLAGS  = ${LDFLAGS}"

## Options you can add for faster/simpler build at the expense of features:
COMMON_CONFIG+=" 
--disable-nls
--disable-doc
--disable-man
"

if [ -z "$GCC_CONFIG_FOR_TARGET" ] ; then
    ## detect config params for $TARGET
    case ${TARGET} in *mips64*|*mipsisa64*)
        case ${TARGET} in
            *n32*) GCC_CONFIG_FOR_TARGET+=' --with-abi=n32' ;;
            *)     GCC_CONFIG_FOR_TARGET+=' --with-abi=64'  ;;
        esac
    esac
    case ${TARGET} in powerpc64*) GCC_CONFIG_FOR_TARGET+=' --with-abi=elfv2 --with-cpu=970' ;; esac
    case ${TARGET} in x86_64*x32) GCC_CONFIG_FOR_TARGET+=' --with-abi=x32'     ;; esac
    case ${TARGET} in *fdpic*) GCC_CONFIG_FOR_TARGET+=' --enable-fdpic'        ;; esac
    case ${TARGET} in *390x*) GCC_CONFIG_FOR_TARGET+=' --with-long-double-128' ;; esac
    case ${TARGET} in *sf)    GCC_CONFIG_FOR_TARGET+=' --with-float=soft'      ;; esac
    case ${TARGET} in *hf)    GCC_CONFIG_FOR_TARGET+=' --with-float=hard'      ;; esac
fi

#case ${TARGET} in *linux*)
#    BINUTILS_CONFIG+=' --enable-gold' ;;
#esac
