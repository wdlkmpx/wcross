diff -Naur partclone-0.3.23/src/main.c partclone-0.3.23-patched/src/main.c
--- partclone-0.3.23/src/main.c	2023-01-27 16:09:49.000000000 +0800
+++ partclone-0.3.23-patched/src/main.c	2023-02-12 21:04:42.000000000 +0800
@@ -36,8 +36,10 @@
 #include <dirent.h>
 #include <limits.h>
 
+#if 0
 // SHA1 for torrent info
 #include "torrent_helper.h"
+#endif
 
 /**
  * progress.h - only for progress bar
@@ -67,10 +69,12 @@
  * main function - for clone or restore data
  */
 int main(int argc, char **argv) {
+#if 0
 #ifdef MEMTRACE
 	setenv("MALLOC_TRACE", "partclone_mtrace.log", 1);
 	mtrace();
 #endif
+#endif
 	char*			source;			/// source data
 	char*			target;			/// target data
 	int			dfr, dfw;		/// file descriptor for source and target
@@ -438,8 +442,9 @@
 
 		// SHA1 for torrent info
 		int tinfo = -1;
+#if 0
 		torrent_generator torrent;
-
+#endif
 		blocks_per_cs = img_opt.blocks_per_checksum;
 
 		log_mesg(1, 0, 0, debug, "#\nBuffer capacity = %u, Blocks per cs = %u\n#\n", buffer_capacity, blocks_per_cs);
@@ -469,8 +474,9 @@
 			char torrent_name[PATH_MAX + 1] = {'\0'};
 			sprintf(torrent_name,"%s/torrent.info", target);
 			tinfo = open(torrent_name, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
-
+#if 0
 			torrent_init(&torrent, tinfo);
+#endif
 			dprintf(tinfo, "block_size: %u\n", block_size);
 			dprintf(tinfo, "blocks_total: %llu\n", blocks_total);
 		}
@@ -555,11 +561,12 @@
 				// because when calling write_block_file
 				// we will create a new file to describe a continuous block (or buffer is full)
 				// and never write to same file again
+#if 0
 				torrent_start_offset(&torrent, block_id * block_size);
 				torrent_end_length(&torrent, blocks_read * block_size);
 
 				torrent_update(&torrent, read_buffer, blocks_read * block_size);
-
+#endif
 				if (opt.torrent_only == 1) {
 					w_size = blocks_read * block_size;
 				} else {
@@ -585,7 +592,9 @@
 		} while (1);
 
 		if (opt.blockfile == 1) {
+#if 0
 			torrent_final(&torrent);
+#endif
 		} else {
 			if (blocks_in_cs > 0) {
 
@@ -639,7 +648,9 @@
 
 		// SHA1 for torrent info
 		int tinfo = -1;
+#if 0
 		torrent_generator torrent;
+#endif
 
 		log_mesg(1, 0, 0, debug, "#\nBuffer capacity = %u, Blocks per cs = %u\n#\n", buffer_capacity, blocks_per_cs);
 
@@ -696,8 +707,9 @@
 			char torrent_name[PATH_MAX + 1] = {'\0'};
 			sprintf(torrent_name,"%s/torrent.info", target);
 			tinfo = open(torrent_name, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
-
+#if 0
 			torrent_init(&torrent, tinfo);
+#endif
 			dprintf(tinfo, "block_size: %u\n", block_size);
 			dprintf(tinfo, "blocks_total: %llu\n", blocks_total);
 		}
@@ -831,11 +843,12 @@
 					    // because when calling write_block_file
 					    // we will create a new file to describe a continuous block (or buffer is full)
 					    // and never write to same file again
+#if 0
 					    torrent_start_offset(&torrent, block_id * block_size);
 					    torrent_end_length(&torrent, blocks_write * block_size);
 
 					    torrent_update(&torrent, write_buffer + blocks_written * block_size, blocks_write * block_size);
-
+#endif
 					    if (opt.torrent_only == 1) {
 						w_size = blocks_write * block_size;
 					    } else {
@@ -864,7 +877,9 @@
 
 		// finish SHA1 for torrent info
 		if (opt.blockfile == 1) {
+#if 0
 			torrent_final(&torrent);
+#endif
 		}
 
 		free(write_buffer);
@@ -1052,8 +1067,9 @@
 
 		// SHA1 for torrent info
 		int tinfo = -1;
+#if 0
 		torrent_generator torrent;
-
+#endif
 		buffer = (char*)malloc(blocks_in_buffer * block_size);
 		if (buffer == NULL) {
 			log_mesg(0, 1, 1, debug, "%s, %i, not enough memory\n", __func__, __LINE__);
@@ -1066,7 +1082,9 @@
 			char torrent_name[PATH_MAX + 1] = {'\0'};
 			sprintf(torrent_name,"%s/torrent.info", target);
 			tinfo = open(torrent_name, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
+#if 0
 			torrent_init(&torrent, tinfo);
+#endif
 			dprintf(tinfo, "block_size: %u\n", block_size);
 			dprintf(tinfo, "blocks_total: %llu\n", blocks_total);
 		}
@@ -1108,11 +1126,12 @@
 				        // because when calling write_block_file
 				        // we will create a new file to describe a continuous block (or buffer is full)
 				        // and never write to same file again
+#if 0
 					torrent_start_offset(&torrent, copied * block_size);
 					torrent_end_length(&torrent, rescue_write_size);
                                         
 					torrent_update(&torrent, buffer, rescue_write_size);
-
+#endif
 					if (opt.torrent_only == 1) {
 						w_size = rescue_write_size;
 					} else {
@@ -1135,11 +1154,12 @@
 			    // because when calling write_block_file
 			    // we will create a new file to describe a continuous block (or buffer is full)
 			    // and never write to same file again
+#if 0
 			    torrent_start_offset(&torrent, copied * block_size);
 			    torrent_end_length(&torrent, blocks_read * block_size);
 
 			    torrent_update(&torrent, buffer, blocks_read * block_size);
-
+#endif
 			    if (opt.torrent_only == 1) {
 				    w_size = blocks_read * block_size;
 			    } else {
@@ -1172,7 +1192,9 @@
 
 		// finish SHA1 for torrent info
 		if (opt.blockfile == 1) {
+#if 0
 			torrent_final(&torrent);
+#endif
 		}
 
 		free(buffer);
diff -Naur partclone-0.3.23/src/Makefile.am partclone-0.3.23-patched/src/Makefile.am
--- partclone-0.3.23/src/Makefile.am	2023-01-27 16:09:49.000000000 +0800
+++ partclone-0.3.23-patched/src/Makefile.am	2023-02-12 21:09:53.000000000 +0800
@@ -1,6 +1,6 @@
 AUTOMAKE_OPTIONS = subdir-objects
 AM_CPPFLAGS = -DLOCALEDIR=\"$(localedir)\" -D_FILE_OFFSET_BITS=64
-LDADD = $(LIBINTL) -lcrypto
+LDADD = $(LIBINTL)
 sbin_PROGRAMS=partclone.info partclone.dd partclone.restore partclone.chkimg partclone.imager #partclone.imgfuse #partclone.block
 TOOLBOX = srcdir=$(top_srcdir) builddir=$(top_builddir) $(top_srcdir)/toolbox
 
@@ -14,7 +14,7 @@
 
 if ENABLE_STATIC
 AM_LDFLAGS=-static
-LDADD_static=-lcrypto -ldl
+LDADD_static=-ldl
 endif
 
 if ENABLE_TINFO
@@ -39,53 +39,53 @@
 partclone_info_SOURCES=info.c partclone.c checksum.c partclone.h fs_common.h checksum.h
 partclone_restore_SOURCES=$(main_files) ddclone.c ddclone.h
 partclone_restore_CFLAGS=-DRESTORE -DDD
-partclone_restore_LDADD=-lcrypto ${LDADD_static}
+partclone_restore_LDADD=${LDADD_static}
 
 partclone_chkimg_SOURCES=$(main_files) ddclone.c ddclone.h
 partclone_chkimg_CFLAGS=-DCHKIMG -DDD
-partclone_chkimg_LDADD=-lcrypto ${LDADD_static}
+partclone_chkimg_LDADD=${LDADD_static}
 
 partclone_dd_SOURCES=$(main_files) ddclone.c ddclone.h
 partclone_dd_CFLAGS=-DDD
-partclone_dd_LDADD=-lcrypto ${LDADD_static}
+partclone_dd_LDADD=${LDADD_static}
 
 partclone_imager_SOURCES=$(main_files) ddclone.c ddclone.h
 partclone_imager_CFLAGS=-DIMG
-partclone_imager_LDADD=-lcrypto ${LDADD_static}
+partclone_imager_LDADD=${LDADD_static}
 
 if ENABLE_EXTFS
 sbin_PROGRAMS += partclone.extfs
 partclone_extfs_SOURCES=$(main_files) extfsclone.c extfsclone.h
 partclone_extfs_CFLAGS=-DEXTFS
-partclone_extfs_LDADD=-lext2fs -lcom_err -lpthread -lcrypto ${LDADD_static}
+partclone_extfs_LDADD=-lext2fs -lcom_err -lpthread ${LDADD_static}
 endif
 
 if ENABLE_REISERFS
 sbin_PROGRAMS += partclone.reiserfs
 partclone_reiserfs_SOURCES=$(main_files) reiserfsclone.c reiserfsclone.h
 partclone_reiserfs_CFLAGS=-DREISERFS
-partclone_reiserfs_LDADD=-lreiserfs -ldal -lcrypto ${LDADD_static}
+partclone_reiserfs_LDADD=-lreiserfs -ldal ${LDADD_static}
 endif
 
 if ENABLE_REISER4
 sbin_PROGRAMS += partclone.reiser4
 partclone_reiser4_SOURCES=$(main_files) reiser4clone.c reiser4clone.h
 partclone_reiser4_CFLAGS=-DREISER4
-partclone_reiser4_LDADD=-lreiser4 -laal -lcrypto ${LDADD_static}
+partclone_reiser4_LDADD=-lreiser4 -laal ${LDADD_static}
 endif
 
 if ENABLE_HFSP
 sbin_PROGRAMS += partclone.hfsp
 partclone_hfsp_SOURCES=$(main_files) hfsplusclone.c hfsplusclone.h
 partclone_hfsp_CFLAGS=-DHFSPLUS
-partclone_hfsp_LDADD=-lcrypto ${LDADD_static}
+partclone_hfsp_LDADD=${LDADD_static}
 endif
 
 if ENABLE_APFS
 sbin_PROGRAMS += partclone.apfs
 partclone_apfs_SOURCES=$(main_files) apfsclone.c apfsclone.h
 partclone_apfs_CFLAGS=-DAPFS
-partclone_apfs_LDADD=-lcrypto ${LDADD_static}
+partclone_apfs_LDADD=${LDADD_static}
 endif
 
 
@@ -93,35 +93,35 @@
 sbin_PROGRAMS += partclone.xfs
 partclone_xfs_SOURCES=$(main_files) xfsclone.c xfsclone.h $(XFS_SOURCE)
 partclone_xfs_CFLAGS=-I$(srcdir)/xfs/include -I$(srcdir)/xfs/libxfs/ -I$(srcdir)/xfs/include/xfs/ -DXFS -D_GNU_SOURCE -DNDEBUG  $(UUID_CFLAGS) 
-partclone_xfs_LDADD=-lrt -lpthread -luuid -lcrypto ${LDADD_static}
+partclone_xfs_LDADD=-lrt -lpthread -luuid ${LDADD_static}
 endif
 
 if ENABLE_EXFAT
 sbin_PROGRAMS += partclone.exfat
 partclone_exfat_SOURCES=$(main_files) exfatclone.c exfatclone.h $(EXFATFS_SOURCE)
 partclone_exfat_CFLAGS=-DEXFAT -D_GNU_SOURCE -std=c99
-partclone_exfat_LDADD=-lcrypto ${LDADD_static}
+partclone_exfat_LDADD=${LDADD_static}
 endif
 
 if ENABLE_F2FS
 sbin_PROGRAMS += partclone.f2fs
 partclone_f2fs_SOURCES=$(main_files) f2fsclone.c f2fsclone.h $(F2FS_SOURCE)
 partclone_f2fs_CFLAGS=-DF2FS
-partclone_f2fs_LDADD=-luuid -lcrypto ${LDADD_static}
+partclone_f2fs_LDADD=-luuid ${LDADD_static}
 endif
 
 if ENABLE_NILFS2
 sbin_PROGRAMS += partclone.nilfs2
 partclone_nilfs2_SOURCES=$(main_files) nilfsclone.c nilfsclone.h
 partclone_nilfs2_CFLAGS=-DNILFS
-partclone_nilfs2_LDADD=-lnilfs -lcrypto ${LDADD_static}
+partclone_nilfs2_LDADD=-lnilfs ${LDADD_static}
 endif
 
 if ENABLE_FAT
 sbin_PROGRAMS += partclone.fat
 partclone_fat_SOURCES=$(main_files) fatclone.c fatclone.h
 partclone_fat_CFLAGS=-DFAT
-partclone_fat_LDADD=-lcrypto ${LDADD_static}
+partclone_fat_LDADD=${LDADD_static}
 endif
 
 sbin_PROGRAMS += partclone.ntfsfixboot
@@ -131,10 +131,10 @@
 partclone_ntfs_SOURCES=$(main_files) ntfsclone-ng.c ntfsclone-ng.h
 if ENABLE_NTFS_3G
 partclone_ntfs_CFLAGS=-DNTFS3G
-partclone_ntfs_LDADD=-lntfs-3g -lcrypto ${LDADD_static}
+partclone_ntfs_LDADD=-lntfs-3g ${LDADD_static}
 else
 partclone_ntfs_CFLAGS=-DNTFS
-partclone_ntfs_LDADD=-lntfs -lcrypto ${LDADD_static}
+partclone_ntfs_LDADD=-lntfs ${LDADD_static}
 endif
 endif
 
@@ -142,24 +142,24 @@
 sbin_PROGRAMS += partclone.ufs
 partclone_ufs_SOURCES=$(main_files) ufsclone.c ufsclone.h
 partclone_ufs_CFLAGS=-DUFS -D_GNU_SOURCE
-partclone_ufs_LDADD=-lufs -lbsd -lcrypto ${LDADD_static}
+partclone_ufs_LDADD=-lufs -lbsd ${LDADD_static}
 endif
 
 if ENABLE_VMFS
 sbin_PROGRAMS += partclone.vmfs
 partclone_vmfs_SOURCES=$(main_files) vmfsclone.c vmfsclone.h
 partclone_vmfs_CFLAGS=-DVMFS -D_GNU_SOURCE $(UUID_CFLAGS)
-partclone_vmfs_LDADD=-lvmfs -luuid -lcrypto ${LDADD_static}
+partclone_vmfs_LDADD=-lvmfs -luuid ${LDADD_static}
 
 sbin_PROGRAMS += partclone.vmfs5
 partclone_vmfs5_SOURCES=$(main_files) vmfs5clone.c vmfsclone.h
 partclone_vmfs5_CFLAGS=-DVMFS -D_GNU_SOURCE $(UUID_CFLAGS)
-partclone_vmfs5_LDADD=-lvmfs -luuid -lcrypto ${LDADD_static}
+partclone_vmfs5_LDADD=-lvmfs -luuid ${LDADD_static}
 
 sbin_PROGRAMS += partclone.fstype
 partclone_fstype_SOURCES=fstype.c
 partclone_fstype_CFLAGS=-DVMFS -D_GNU_SOURCE $(UUID_CFLAGS)
-partclone_fstype_LDADD=-lvmfs -luuid -lcrypto ${LDADD_static}
+partclone_fstype_LDADD=-lvmfs -luuid ${LDADD_static}
 
 endif
 
@@ -168,29 +168,29 @@
 #partclone_jfs_SOURCES=$(main_files) jfs_devices.c jfs_devices.h jfsclone.c jfsclone.h
 partclone_jfs_SOURCES=$(main_files) jfsclone.c jfsclone.h
 partclone_jfs_CFLAGS=-DJFS
-partclone_jfs_LDADD=-luuid -ljfs -lcrypto ${LDADD_static}
+partclone_jfs_LDADD=-luuid -ljfs ${LDADD_static}
 endif
 
 if ENABLE_BTRFS
 sbin_PROGRAMS += partclone.btrfs
 partclone_btrfs_SOURCES=$(main_files) btrfsclone.c btrfsclone.h $(BTRFS_SOURCE)
 partclone_btrfs_CFLAGS=-DBTRFS -DBTRFS_FLAT_INCLUDES -D_XOPEN_SOURCE=700 -D_GNU_SOURCE -DCRYPTOPROVIDER_BUILTIN=1 -I$(srcdir)/btrfs -I$(srcdir)/btrfs/libbtrfsutil
-partclone_btrfs_LDADD=-luuid -lblkid -lcrypto ${LDADD_static}
+partclone_btrfs_LDADD=-luuid -lblkid ${LDADD_static}
 endif
 
 if ENABLE_MINIX
 sbin_PROGRAMS += partclone.minix
 partclone_minix_SOURCES=$(main_files) minixclone.c minixclone.h
 partclone_minix_CFLAGS=-DMINIX
-partclone_minix_LDADD=-lcrypto ${LDADD_static}
+partclone_minix_LDADD=${LDADD_static}
 endif
 
 if ENABLE_FUSE
 sbin_PROGRAMS+=partclone.imgfuse
 partclone_imgfuse_SOURCES=fuseimg.c partclone.c checksum.c partclone.h fs_common.h checksum.h
-partclone_imgfuse_LDADD=-lfuse -lcrypto ${LDADD_static}
+partclone_imgfuse_LDADD=-lfuse ${LDADD_static}
 if ENABLE_STATIC
-partclone_imgfuse_LDADD+=-ldl -lcrypto ${LDADD_static}
+partclone_imgfuse_LDADD+=-ldl ${LDADD_static}
 endif
 endif
 
diff -Naur partclone-0.3.23/src/torrent_helper.c partclone-0.3.23-patched/src/torrent_helper.c
--- partclone-0.3.23/src/torrent_helper.c	2023-01-27 16:09:49.000000000 +0800
+++ partclone-0.3.23-patched/src/torrent_helper.c	2023-02-12 21:04:42.000000000 +0800
@@ -11,6 +11,7 @@
  * (at your option) any later version.
  */
 
+#if 0
 #include "torrent_helper.h"
 
 void torrent_init(torrent_generator *torrent, int tinfo)
@@ -122,3 +123,4 @@
 {
 	dprintf(torrent->tinfo, "length: %032llx\n", length);
 }
+#endif
diff -Naur partclone-0.3.23/src/torrent_helper.h partclone-0.3.23-patched/src/torrent_helper.h
--- partclone-0.3.23/src/torrent_helper.h	2023-01-27 16:09:49.000000000 +0800
+++ partclone-0.3.23-patched/src/torrent_helper.h	2023-02-12 21:04:42.000000000 +0800
@@ -17,6 +17,7 @@
  * https://github.com/tjjh89017/ezio utils/partclone_create_torrent.py
  */
 
+#if 0
 #include <config.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -58,3 +59,4 @@
 void torrent_start_offset(torrent_generator *torrent, unsigned long long offset);
 // print length, end a block
 void torrent_end_length(torrent_generator *torrent, unsigned long long length);
+#endif
